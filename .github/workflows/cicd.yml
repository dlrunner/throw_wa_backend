name: Throw-wa CI & CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List files
        run: ls -al throw_wa/

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Add permission for gradlew
        run: chmod +x throw_wa_backend/throw_wa/gradlew

      - name: Build with Gradle
        run: |
          cd throw_wa_backend/throw_wa
          ./gradlew build -x test

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Add permission for gradlew
        run: chmod +x throw_wa_backend/throw_wa/gradlew

      - name: Test with Gradle
        run: |
          cd throw_wa_backend/throw_wa
          ./gradlew test

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push to Docker Hub
        run: |
          cd throw_wa_backend/throw_wa
          docker build -t ${{ secrets.DOCKER_REPO_SPRING }}:latest -f Dockerfile .
          docker tag ${{ secrets.DOCKER_REPO_SPRING }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_SPRING }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_SPRING }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEMKEY }}
          script: |
            cd /home/ubuntu/
            sudo docker-compose down
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -f
